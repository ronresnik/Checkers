def try_to_eat(src_x_index, src_y_index, dst_x_index, dst_y_index, game_board, color):
    try:
        eaten_x_index, eaten_y_index = game_board.get_in_between_cordinates(
            src_x_index, src_y_index, dst_x_index, dst_y_index)
        if(isinstance(game_board[eaten_x_index, eaten_y_index], Troop)
                and game_board[eaten_x_index, eaten_y_index].color != color):
            game_board[eaten_x_index, eaten_y_index] = 0
            print(
                f"Troop in index: {eaten_x_index},{eaten_y_index} was just eaten")
            return True

    except ValueError:
        print("Simple advancment move preformed")
        return False

    except IndexError:
        print("multiple tiles move")
        return False


def save_current_board(undo_stack, game_board, temp_piece):
    """[summary]
    Args:
        undo_stack ([type]): [description]
        game_board ([type]): [description]
        src_x_index ([type]): [description]
        src_y_index ([type]): [description]
    """
    try:
        undo_board = game_board.to_list(temp_piece.x_index, temp_piece.y_index)
        undo_stack.append(undo_board)
        # EAT = False
        return True
    except Exception as e:
        return False


def change_player(game_board, src_x_index, src_y_index, dst_x_index, dst_y_index, temp_piece, EAT):
    # NOW WE HAVE ONLY MULTIPLE EATING SARUF saruf_check
    # TODO NotImplemented - simple move - could eat
    if game_board.has_SARUF_suspicous \
            and game_board.suspicous_could_eat(src_x_index, src_y_index) and not EAT:  # or didnt eat and could eat - pass color
        print(
            f"SARUF! - {game_board.SARUF_suspicous_x},{game_board.SARUF_suspicous_y} could eat again ()but you didn't")
        game_board[game_board.SARUF_suspicous_x,
                   game_board.SARUF_suspicous_y] = 0

        game_board.update_turn()

    elif (EAT and game_board[dst_x_index, dst_y_index].can_eat(game_board)):
        print("You can play again")
        game_board.set_SARUF_suspicous(
            dst_x_index, dst_y_index)
    else:
        print(f"Color {temp_piece.color} Turn Ended.")
        game_board.has_SARUF_suspicous = False
        game_board.update_turn()

    game_board.temp_piece = None


def try_to_asscend(temp_piece):
    if (temp_piece.x_index, temp_piece.y_index) in WHITE_BASE and temp_piece.color == "Black" \
            or (temp_piece.x_index, temp_piece.y_index) in BLACK_BASE and temp_piece.color == "Red":
        return Queen(*[temp_piece.__dict__[key] for key in temp_piece.__dict__.keys() if key != "image"])
    return temp_piece


def update_game(game_board, temp_piece, src_x_index, src_y_index):
    game_board[src_x_index, src_y_index] = 0
    temp_piece.state = True
    game_board[temp_piece.x_index, temp_piece.y_index] = temp_piece
    print("END")


def try_to_get_piece(game_board, x_index,  y_index):
    try:
        temp_piece = game_board[x_index, y_index]
        if game_board.it_is_this_color_turn(temp_piece):
            game_board[temp_piece.x_index, temp_piece.y_index].state = False
            return temp_piece

    except AttributeError:
        print("Please choose a tile contaning a piece")
        return 0


def select(game_board, x_index, y_index, undo_stack, EAT):
    if game_board.temp_piece:
        temp_piece = game_board.temp_piece
        if isinstance(temp_piece, Troop) and game_board.it_is_this_color_turn(temp_piece) \
                and temp_piece.can_advance(x_index, y_index, game_board, EAT):

            src_x_index, src_y_index = temp_piece.x_index, temp_piece.y_index
            temp_piece.set_new_cordinates(x_index, y_index)
            EAT = try_to_eat(src_x_index, src_y_index, temp_piece.x_index,
                             temp_piece.y_index, game_board, temp_piece.color)
            temp_piece = try_to_asscend(temp_piece)
            update_game(game_board, temp_piece, src_x_index, src_y_index,)
            # -----------------------END OF BASIC MOVE--------------------------------
            change_player(game_board, src_x_index, src_y_index,
                          temp_piece.x_index, temp_piece.y_index, temp_piece, EAT)
            print(game_board)
        elif isinstance(temp_piece, int) or temp_piece is None:
            # {non piece land}
            print("idgaf!")
        else:
            # {cannot advance}
            temp_piece.state = True
            game_board[temp_piece.x_index,
                       temp_piece.y_index] = temp_piece
            print("The troop canot advance to the desired destanation")
            game_board.temp_piece = None
    else:
        temp_piece = try_to_get_piece(game_board, x_index, y_index)
        if isinstance(temp_piece, Troop):
            save_current_board(undo_stack, game_board, temp_piece)
            game_board.temp_piece = temp_piece
            regular = temp_piece.can_advance(
                temp_piece.x_index, temp_piece.y_index, game_board, EAT, get_locs=True)
            eat = [(loc[0], loc[1])
                   for loc in temp_piece.can_eat(game_board, get_locs=True)]
            print(game_board)
            draw_valid_moves(game_board,  regular+eat)


def draw_valid_moves(game_board, moves):
    for move in moves:
        row, col = move
        pygame.draw.circle(game_board.gamedisplay, RED, (row * TILE_WIDTH +
                                                         TILE_WIDTH//2, col * TILE_WIDTH + TILE_WIDTH//2), 15)
        pygame.display.update()